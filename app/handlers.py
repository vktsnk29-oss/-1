from urllib.parse import quote

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

from .config import load_settings

settings = load_settings()


def _deposit_keyboard(addr: str, comment: str) -> InlineKeyboardMarkup:
    """
    ‚úÖ HTTPS-deeplink –¥–ª—è Tonkeeper (Telegram –∑–∞–ø—Ä–µ—â–∞–µ—Ç tonkeeper:// –≤ –∫–Ω–æ–ø–∫–∞—Ö)
    ‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞ Telegram Wallet
    """
    tk_url = f"https://app.tonkeeper.com/transfer/{addr}?text={quote(comment)}"
    tw_url = "https://t.me/wallet"

    rows = [
        [
            InlineKeyboardButton("Tonkeeper", url=tk_url),
            InlineKeyboardButton("Telegram Wallet", url=tw_url),
        ],
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏/–ø—Ä–æ–≤–µ—Ä–∫—É:
        # [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å", callback_data="show_addr")],
        # [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"show_comment:{comment}")],
    ]
    return InlineKeyboardMarkup(rows)


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    comment = f"user-{user.id}" if user else "deposit"

    text = (
        "üíº *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n\n"
        f"*–ê–¥—Ä–µ—Å:*\n`{settings.ton_address}`\n"
        f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n`{comment}`"
    )
    await update.effective_message.reply_text(
        text,
        reply_markup=_deposit_keyboard(settings.ton_address, comment),
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )


async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    data = q.data or ""
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–æ–∏ callback_data (show_addr / show_comment –∏ –ø—Ä.)
    if data.startswith("show_addr"):
        await q.answer()
        await q.edit_message_text(
            f"–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n`{settings.ton_address}`",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
        )
        return

    await q.answer("–û–∫")


def register(app: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤. –í web.py –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ register_handlers(application)
    """
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CallbackQueryHandler(on_cb))

# app/handlers.py
from __future__ import annotations

import os
from typing import Optional

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# === ENV ===
TON_ADDRESS = os.getenv("TON_ADDRESS", "")
MIN_DEPOSIT = os.getenv("TON_MIN_DEPOSIT", "0.1")
DEFAULT_DEPOSIT_AMOUNT = os.getenv("DEFAULT_DEPOSIT_AMOUNT", "0")  # "0" -> –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å
DEPOSIT_TAG_PREFIX = os.getenv("DEPOSIT_TAG_PREFIX", "P4V")


# === UI ===
def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
                InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            ],
            [
                InlineKeyboardButton("üí∏ –í—ã–≤–æ–¥", callback_data="withdraw"),
                InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="ref"),
            ],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
        ]
    )


def payment_keyboard(address: str, tag: str, amount: Optional[str]) -> InlineKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∏ deeplink –¥–ª—è Tonkeeper / Telegram Wallet –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è ton:// —Å—Å—ã–ª–∫–∞.
    amount ‚Äî —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "5"), "0" –∏–ª–∏ None = –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å—É–º–º—É.
    """
    amt_q = f"&amount={amount}" if amount and amount != "0" else ""
    ton_universal = f"ton://transfer/{address}?text={tag}{amt_q}"
    tonkeeper = f"tonkeeper://transfer/{address}?text={tag}{amt_q}"
    tg_wallet = (
        f"https://t.me/wallet/start?startapp=send"
        f"&asset=TON&address={address}{amt_q}&comment={tag}"
    )
    kb = [
        [InlineKeyboardButton("üöÄ –û–ø–ª–∞—Ç–∏—Ç—å (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)", url=ton_universal)],
        [
            InlineKeyboardButton("üì± Tonkeeper", url=tonkeeper),
            InlineKeyboardButton("üíº Telegram Wallet", url=tg_wallet),
        ],
    ]
    return InlineKeyboardMarkup(kb)


# === Helpers ===
def _base36(n: int) -> str:
    chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if n == 0:
        return "0"
    s = []
    x = abs(n)
    while x:
        x, r = divmod(x, 36)
        s.append(chars[r])
    return ("-" if n < 0 else "") + "".join(reversed(s))


def get_or_create_deposit_tag(user_id: int, prefix: str = DEPOSIT_TAG_PREFIX) -> str:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Ç–µ–≥ –∏–∑ –ë–î (—Ç–∞–±–ª–∏—Ü–∞ deposit_tags), –µ—Å–ª–∏ –µ—Å—Ç—å.
    –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç ‚Äî –¥–∞—ë–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–≥ –ø–æ user_id.
    """
    try:
        from app.db import SessionLocal  # type: ignore
        from app.models import DepositTag  # type: ignore[attr-defined]
    except Exception:
        # –§–æ–ª–±—ç–∫: –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–≥ –±–µ–∑ –ë–î
        return f"{prefix}-{_base36(user_id)}"

    try:
        with SessionLocal() as db:
            row = db.query(DepositTag).filter_by(user_id=user_id, is_active=True).first()
            if row:
                return row.tag

            # –≥–µ–Ω–µ—Ä–∏–º –Ω–æ–≤—ã–π –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            import secrets, string

            ALPH = string.ascii_uppercase + string.digits
            def gen() -> str:
                return f"{prefix}-" + "".join(secrets.choice(ALPH) for _ in range(6))

            tag = gen()
            while db.query(DepositTag).filter_by(tag=tag).first():
                tag = gen()

            db.add(DepositTag(user_id=user_id, tag=tag, is_active=True))
            db.commit()
            return tag
    except Exception:
        # –õ—é–±–∞—è –æ—à–∏–±–∫–∞ —Å –ë–î ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫
        return f"{prefix}-{_base36(user_id)}"


async def _get_balance_text(user_id: int) -> str:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ –ë–î (—Ç–∞–±–ª–∏—Ü–∞ balances). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî 0.00 TON.
    """
    try:
        from app.db import SessionLocal  # type: ignore
        from app.models import Balance  # type: ignore[attr-defined]
    except Exception:
        return "–í–∞—à –±–∞–ª–∞–Ω—Å: 0.00 TON"

    try:
        with SessionLocal() as db:
            row = db.query(Balance).filter_by(user_id=user_id).first()
            amount = row.amount if row and row.amount is not None else 0
            return f"–í–∞—à –±–∞–ª–∞–Ω—Å: {amount} TON"
    except Exception:
        return "–í–∞—à –±–∞–ª–∞–Ω—Å: 0.00 TON"


# === Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î; –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    try:
        from app.db import SessionLocal  # type: ignore
        from app.models import User  # type: ignore[attr-defined]
        from sqlalchemy import select  # type: ignore
        tg_id = update.effective_user.id
        with SessionLocal() as db:
            exists = db.execute(select(User).where(User.tg_id == tg_id)).scalar_one_or_none()
            if not exists:
                u = User(tg_id=tg_id, language=(update.effective_user.language_code or "ru"))
                db.add(u)
                db.commit()
    except Exception:
        pass

    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ–¥-–±–æ—Ç. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard()
    )


async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    if data == "balance":
        text = await _get_balance_text(update.effective_user.id)
        await q.edit_message_text(text, reply_markup=main_keyboard())

    elif data == "about":
        await q.edit_message_text(
            "–ú—ã ‚Äî —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–∏—ë–º–æ–º TON. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–µ–ø–æ–∑–∏—Ç-—Ç–µ–≥).",
            reply_markup=main_keyboard(),
        )

    elif data == "deposit":
        tag = get_or_create_deposit_tag(update.effective_user.id, DEPOSIT_TAG_PREFIX)
        text = (
            f"üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON*\n\n"
            f"1) –û—Ç–ø—Ä–∞–≤—å—Ç–µ TON –Ω–∞ –∞–¥—Ä–µ—Å:\n`{TON_ADDRESS}`\n"
            f"2) –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n`{tag}`\n"
            f"3) –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: *{MIN_DEPOSIT} TON*\n\n"
            f"–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏."
        )
        await q.edit_message_text(
            text,
            parse_mode="Markdown",
            reply_markup=payment_keyboard(TON_ADDRESS, tag, DEFAULT_DEPOSIT_AMOUNT),
        )

    elif data == "withdraw":
        await q.edit_message_text(
            "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å (–∑–∞–≥–ª—É—à–∫–∞).",
            reply_markup=main_keyboard(),
        )

    elif data == "ref":
        # –ó–∞–≥–ª—É—à–∫–∞. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: t.me/<bot>?start=<ref>
        await q.edit_message_text(
            "–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/your_bot?start=ref123",
            reply_markup=main_keyboard(),
        )

    else:
        await q.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=main_keyboard())


def register(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_cb))

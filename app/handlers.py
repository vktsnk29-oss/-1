from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, Application
from sqlalchemy.orm import Session
from .db import SessionLocal
from .models import User, Balance
from .services import get_or_create_tag
import os

MAIN_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
     InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
    [InlineKeyboardButton("üí∏ –í—ã–≤–æ–¥", callback_data="withdraw"),
     InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="ref")],
    [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")]
])

def payment_keyboard(address: str, amount: float | None, tag: str) -> InlineKeyboardMarkup:
    amt = f"&amount={amount}" if amount and amount > 0 else ""
    # universal ton://
    ton_universal = f"ton://transfer/{address}?{'amount='+str(amount)+'&' if amount and amount>0 else ''}text={tag}"
    tonkeeper = f"tonkeeper://transfer/{address}?{'amount='+str(amount)+'&' if amount and amount>0 else ''}text={tag}"
    tg_wallet = f"https://t.me/wallet/start?startapp=send&asset=TON&address={address}{amt}&comment={tag}"
    kb = [
        [InlineKeyboardButton("üöÄ –û–ø–ª–∞—Ç–∏—Ç—å (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)", url=ton_universal)],
        [InlineKeyboardButton("üì± Tonkeeper", url=tonkeeper),
         InlineKeyboardButton("üíº Telegram Wallet", url=tg_wallet)],
    ]
    return InlineKeyboardMarkup(kb)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # user register
    with SessionLocal() as db:
        u = db.query(User).filter_by(tg_id=update.effective_user.id).first()
        if not u:
            u = User(tg_id=update.effective_user.id, language=(update.effective_user.language_code or "ru"))
            db.add(u); db.commit()
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ–¥-–±–æ—Ç. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_KB
    )

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    data = q.data
    if data == "balance":
        with SessionLocal() as db:
            u = db.query(User).filter_by(tg_id=update.effective_user.id).first()
            bal = db.query(Balance).filter_by(user_id=u.id).first()
            amount = bal.amount if bal else 0
        await q.edit_message_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {amount} TON", reply_markup=MAIN_KB)
    elif data == "about":
        await q.edit_message_text("–ú—ã ‚Äî –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å. –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ TON, —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=MAIN_KB)
    elif data == "deposit":
        address = os.getenv("TON_ADDRESS", "EQ...")
        amount = float(os.getenv("DEFAULT_DEPOSIT_AMOUNT", "0"))
        with SessionLocal() as db:
            u = db.query(User).filter_by(tg_id=update.effective_user.id).first()
            tag = get_or_create_tag(db, user_id=u.id, prefix=os.getenv("DEPOSIT_TAG_PREFIX","P4V"))
        text = (
            "üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON*

"
            f"1) –û—Ç–ø—Ä–∞–≤—å—Ç–µ TON –Ω–∞ –∞–¥—Ä–µ—Å:
`{address}`
"
            f"2) –£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
`{tag}`
"
            "–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏."
        )
        await q.edit_message_text(text, parse_mode="Markdown", reply_markup=payment_keyboard(address, amount if amount>0 else None, tag))
    elif data == "withdraw":
        await q.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=MAIN_KB)
    elif data == "ref":
        await q.edit_message_text("–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/your_bot?start=ref123 (–∑–∞–≥–ª—É—à–∫–∞)", reply_markup=MAIN_KB)
    else:
        await q.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=MAIN_KB)

def register(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_cb))

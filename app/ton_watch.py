import asyncio
from typing import Any, Dict, List, Optional

import httpx

try:
    # –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å structlog
    import structlog

    log = structlog.get_logger()
except Exception:
    # fallback
    import logging

    logging.basicConfig(level=logging.INFO)
    log = logging.getLogger("ton_watcher")

from sqlalchemy import create_engine, select
from sqlalchemy.orm import Session, sessionmaker

from .config import load_settings
from .models import State  # –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ (Payment/Balance/...) –≤—ã —É–∂–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≤ —Å–≤–æ—ë–º –∫–æ–¥–µ


settings = load_settings()


# --- DB session helper -------------------------------------------------------
def _make_session_factory():
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à SessionLocal –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.
    –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π sessionmaker –æ—Ç DATABASE_URL.
    """
    try:
        from .db import SessionLocal  # type: ignore

        return SessionLocal
    except Exception:
        engine = create_engine(
            settings.database_url, pool_pre_ping=True, future=True
        )
        return sessionmaker(bind=engine, expire_on_commit=False, autoflush=False)


SessionLocal = _make_session_factory()


# --- Toncenter API -----------------------------------------------------------
async def _get_transactions(
    address: str,
    limit: int = 16,
    to_lt: Optional[str] = None,
) -> List[Dict[str, Any]]:
    """
    –í—ã–∑–æ–≤ Toncenter getTransactions —Å:
      - X-API-Key –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ,
      - api_key –≤ query (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π),
      - archival=true,
      - –∫–æ—Ä–æ—Ç–∫–∏–º retry –Ω–∞ 5xx.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (Toncenter –∫–ª–∞–¥—ë—Ç –º–∞—Å—Å–∏–≤ –≤ data['result']).
    """
    base = settings.ton_api_base.rstrip("/")
    # –¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∫ https://toncenter.com/api —Ç–∞–∫ –∏ https://toncenter.com/api/v2
    if base.endswith("/v2"):
        url = f"{base}/getTransactions"
    else:
        url = f"{base}/v2/getTransactions"

    params: Dict[str, Any] = {
        "address": address,
        "limit": limit,
        "archival": "true",
    }
    if to_lt:
        params["to_lt"] = to_lt

    headers: Dict[str, str] = {}
    if getattr(settings, "ton_api_key", None):
        headers["X-API-Key"] = settings.ton_api_key
        params["api_key"] = settings.ton_api_key  # –¥—É–±–ª–∏—Ä—É–µ–º ‚Äî Toncenter —ç—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç

    # –Ω–µ–±–æ–ª—å—à–æ–π retry –Ω–∞ 5xx, —á—Ç–æ–±—ã –≤–æ—Ç—á–µ—Ä –Ω–µ –ø–∞–¥–∞–ª –≤ –ª–æ–≥–∞—Ö
    async with httpx.AsyncClient(timeout=20) as client:
        r = await client.get(url, params=params, headers=headers)
        if 500 <= r.status_code < 600:
            await asyncio.sleep(1.5)
            r = await client.get(url, params=params, headers=headers)

        r.raise_for_status()
        data = r.json()

    # Toncenter: {"ok": true, "result": [ ... ]}
    if isinstance(data, dict):
        return data.get("result", []) or []

    return []


# --- Poll loop ---------------------------------------------------------------
def _get_to_lt(db: Session) -> Optional[str]:
    st = db.get(State, "ton_to_lt")
    return (st.value if st else None) or None


def _set_to_lt(db: Session, new_lt: str) -> None:
    st = db.get(State, "ton_to_lt")
    if st is None:
        st = State(key="ton_to_lt", value=new_lt)
        db.add(st)
    else:
        st.value = new_lt
    db.commit()


def _extract_max_lt(txs: List[Dict[str, Any]]) -> Optional[str]:
    """
    –£ Toncenter lt –º–æ–∂–µ—Ç –ª–µ–∂–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö:
      - tx.get("transaction_id", {}).get("lt")
      - tx.get("lt")
    –°–æ–±–µ—Ä—ë–º –≤—Å–µ, –≤–æ–∑—å–º—ë–º max –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
    """
    lts: List[int] = []
    for tx in txs:
        lt = None
        tid = tx.get("transaction_id") or {}
        if isinstance(tid, dict):
            lt = tid.get("lt") or tid.get("logical_time")
        if lt is None:
            lt = tx.get("lt")
        if lt is None:
            continue
        try:
            lts.append(int(str(lt)))
        except Exception:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            continue

    if not lts:
        return None
    return str(max(lts))


async def poll_once() -> None:
    """
    –û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –æ–ø—Ä–æ—Å–∞ Toncenter.
    1) —á–∏—Ç–∞–µ–º to_lt –∏–∑ state,
    2) –∑–∞–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏,
    3) —Å–æ—Ö—Ä–∞–Ω—è–µ–º max lt –æ–±—Ä–∞—Ç–Ω–æ –≤ state.
    –í–∞—à–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–µ—Å–ª–∏ —É –≤–∞—Å –Ω–∏–∂–µ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
    –±—ã–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å Payment/Balance ‚Äî –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ –∏—Ö; –º—ã –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ç—å/–≤—ã–∑–æ–≤ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ lt).
    """
    with SessionLocal() as db:
        to_lt = _get_to_lt(db)
        txs = await _get_transactions(settings.ton_address, limit=16, to_lt=to_lt)

        if not txs:
            return

        max_lt = _extract_max_lt(txs)
        if max_lt:
            _set_to_lt(db, max_lt)

        # üëâ –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö txs (–ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –∏ —Ç.–ø.)
        # –ø—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
        try:
            log.info("ton_watcher_tx_batch", count=len(txs), new_to_lt=max_lt)
        except Exception:
            pass


async def run_watcher() -> None:
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –æ–ø—Ä–æ—Å Toncenter. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ web.on_startup —á–µ—Ä–µ–∑ create_task(...).
    """
    # –Ω–µ–±–æ–ª—å—à–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–ª–µ–π, —á—Ç–æ–±—ã FastAPI/–±–æ—Ç –ø–æ–¥–Ω—è–ª–∏—Å—å
    await asyncio.sleep(0.5)
    while True:
        try:
            await poll_once()
        except Exception as e:
            try:
                log.error("ton_watcher_error", error=str(e))
            except Exception:
                print("ton_watcher_error", e)
            # —á—Ç–æ–±—ã –Ω–µ –∫—Ä—É—Ç–∏—Ç—å —Ü–∏–∫–ª –±–µ–∑ –ø–∞—É–∑—ã –ø—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö 5xx
            await asyncio.sleep(2.0)
        # –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞
        await asyncio.sleep(3.0)
